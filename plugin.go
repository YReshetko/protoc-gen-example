package main

import (
	"bytes"
	"fmt"
	"github.com/golang/protobuf/proto"
	"github.com/golang/protobuf/protoc-gen-go/descriptor"
	plugin "github.com/golang/protobuf/protoc-gen-go/plugin"
	"log"
	"strings"
)
var imps = []string{
	"proto \"github.com/golang/protobuf/proto\"",
}
type b struct {
	bytes.Buffer
	prefix string
}

func processRequest(rq *plugin.CodeGeneratorRequest) *plugin.CodeGeneratorResponse {
	rs := new(plugin.CodeGeneratorResponse)
	for _, protoFile := range rq.ProtoFile {
		buff := new(b)
		buff.header(*protoFile.Package)

		for _, serv := range protoFile.GetService(){
			serviceName := serv.Name
			log.Println("Working with service: ", serviceName)
			for _, method := range serv.Method{
				methodName := method.Name
				log.Println("Working with method: ", methodName)
				log.Printf("Option %+v\n", method.Options)
				log.Println("Get option", method.Options)

				//for _, opt := range method.Options.ExtensionRangeArray(){
				//
				//}
			}
		}

		rs.File = append(rs.File, &plugin.CodeGeneratorResponse_File{
			Name:    proto.String(generatedFileName(protoFile)),
			Content: proto.String(buff.String()),
		})

	}
	log.Println(rs.File)
	return rs
}

func (buff *b)header(pack string) {
	buff.write("// Code generated by protoc-gen-example. DO NOT EDIT.")
	buff.write('\n')
	buff.write(fmt.Sprintf("package %s", strings.Replace(pack, ".", "_", -1)))
	buff.write('\n')
	buff.imports()
	buff.write('\n')
	buff.write("const _ = proto.ProtoPackageIsVersion3")
	buff.write('\n')
}

func (buff *b)imports()  {
	buff.write("import (")
	buff.write('\n')
	buff.tab()
	for _, imp := range imps{
		buff.write(imp)
		buff.write('\n')
	}
	buff.shiftab()
	buff.write(')')
	buff.write('\n')
}

func (buff *b)tab() {
	buff.prefix = buff.prefix + "\t"
}
func (buff *b)shiftab() {
	buff.prefix = buff.prefix[1:]
}


func (buff *b)write(value ...interface{})  {
	buff.WriteString(buff.prefix)
	for _, v := range value{
		switch t := v.(type) {
		case string:
			buff.WriteString(t)
		case *string:
			buff.WriteString(*t)
		case byte:
			buff.WriteByte(t)
		case rune:
			buff.WriteRune(t)
		default:
			panic(fmt.Sprintf("Unknown type: %+v", t))
		}
	}
}





func generatedFileName(protoFile *descriptor.FileDescriptorProto) string {
	fileName := protoFile.GetName()
	if strings.HasSuffix(fileName, ".proto") {
		fileName = fileName[:len(fileName)-len(".proto")]
	}
	outputFile := fileName + ".ex" + ".go"

	return outputFile
}